Debug SerialUSB Tests:

TX - 
usb.h    -
   Test sketch main-tx-test.cpp
         - send packet containing 1 'A', then send 2 'B's, then 3 'C's...until the packets are of length 2048, roll over the values to remain            in printable ascii
   Test script serial_tx_filetest.py
         - first run the test sketch, and dump the serial ouput to a file via something like:
              $> cat /dev/ttyACM0 > test_file.txt
           you may need to run screen /dev/ttyACM0 first and then close it to get linux to load the serial device    
           once you call cat, hit the BUT button to start the data dump over serial, you can stop the cat once the led blinks
         - run this test_file through serial_tx_filetest.py which just does a sanity check that no bytes fell on the floor, 
           if you only "failed" on lines 1 and 2047, then the data was good. These end cases were just the result of laziness
         - This test seems to work for large packets (2048 bytes) and no send delays! so tx works! 
   Test script serial_tx_test.py
         - run the sketch, run the python script, hit enter, then hit the BUT button
         - this test script tends to fail randomly (with a greater tendency to fail on 512 byte packets than other numbers) where the failure 
           rate goes down as you add send delays. A send delay of 1us universally fails on the first packet of length 1, a delay of 1ms 
           tends to make it into the 500 byte packet range, and a send delay of 10ms tends to succeed all the way through the 2048th packet. 
         - The fact that this test failes, but the file dump test works means that the tx problem is actually with pyserial. We need to 
           find a work around, better understand this problem, and submit a bug to the pyserial team. These tests have only been run under
           debian lenny. 
   A note on BAUDRATES:
         -  slowing down the baud seems to have no effect on the failing python pyserial test (on the fly test). Furthermore, it is unknown
            exactly how to set the baudrate using cat, but since cat /dev/ttyACM0 doesnt work without previously calling screen /dev/ttyACM0
            (perhaps to initialize the device), perhaps calling "screen /dev/ttyACM0 9600" will set the baud for cat to 9600. Eitherway,
            this seems to have no difference in the actual runtime of the serial dump, so either the baud is not used or calling screen before
            calling cat with a baud argument does not set the baudrate. 
   A note on bandwidth:
         -  if MAX_SEND_LEN (in main-tx-test.cpp) is 2048, then we are sending 1+2+3+....2047+2048 = 2096128 ~= 2MB and if we run the sketch a            and dump its output via screen /dev/ttyACM0, it takes 16 seconds to run this transfer. So the average transfer rate is 131KB/s 
            This is a naiive transfer, without trying to arrange bytes such that they are being packetized in groups of 64, etc. 
   main-tx-speed-test.cpp:
         - to further test bandwidth, this test just sends fixed packet lengths quickly. 
           when setting MAX_SEND_LEN (packet len) to 32, and TOTAL_PACKETS to 65536, were sending exactly 2MB in 16 seconds over screen, for
           a data rate of 131KB/s
         - with 2MB but in chunks of 63 bytes each we get a data rate of: 
           131KB/s
         - with 2MB in chunks of 16 we get a data rate of:
           83KB/s (so definitely slower)
         - with 2MB in chunks of 64 bytes we get a data rate of:
           131KB/s
         - the max bandwidth if you actually call screen seems to be about 131KB/s, but if you
           cat the serial device to a file, its more like 160KB/s. 
         - with 2MB in chunks of 65, we dont get something MUCH slower, but it is slower at 115KB/s using screen.
         - All of the speed tests seem to point to throttling by the OS (since twice as many required USB transactions forced on by smaller packet sizes does 
           not cut speed in half). Thus, perhaps a teensyduino style unthrottled driver really would be faster!


wirish   


RX -


TX/RX -